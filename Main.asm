LED1 BIT P2.4					 ;将P3.4用伪命令命名为LED1
LED2 BIT P2.5					 ;将P3.5用伪命令命名为LED2
LED3 BIT P2.6
LED4 BIT P2.7
BEEP BIT P1.0

;数码管引脚定义
SM_G1 BIT P2.0
SM_G2 BIT P2.1
SM_G3 BIT P2.2
SM_G4 BIT P2.3

SM_A  BIT P0.7
SM_B  BIT P0.6
SM_C  BIT P0.5
SM_D  BIT P0.4
SM_E  BIT P0.3
SM_F  BIT P0.2
SM_G  BIT P0.1
SM_DP BIT P0.0

;数码管表
SM_CODE0 EQU 03H
SM_CODE1 EQU 9FH
SM_CODE2 EQU 25H
SM_CODE3 EQU 0DH
SM_CODE4 EQU 99H
SM_CODE5 EQU 49H
SM_CODE6 EQU 41H
SM_CODE7 EQU 1FH
SM_CODE8 EQU 01H
SM_CODE9 EQU 19H

;按键定义
KEY1  BIT  P3.2
KEY2  BIT  P3.4

;特殊寄存器定义
sfr AUXR = 0x8E
sfr BRT  = 0x9C

ORG   0000H
LJMP  MAIN   ;跳转至主函数

ORG   0003H
LJMP  INT_X0 ;外部中断0入口

ORG   000BH
LJMP  INT_T0 ;定时器0中断入口

ORG   0013H
LJMP  INT_X1 ;外部中断1入口

ORG   001BH
LJMP  INT_T1 ;定时器1中断入口

ORG   0023H
LJMP  INT_S  ;串行通信中断入口

;/*********************************************************************************************************
;* 函数名称: MAIN
;* 函数功能: 主函数
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/	  
ORG   0100H
MAIN: 
    MOV   SP,#70H    ;设置堆栈指针
    LCALL TIMER0INIT ;初始化定时器0
    LCALL UARTINIT   ;初始化串口
    LCALL INIT_DELAY ;初始化延时模块
    SETB  EA         ;打开总中断
    CLR   LED1
    CLR   LED2
    CLR   LED3
    CLR   LED4
LOOP:
    ;CPL   LED1
    MOV   R0,#0x02
    LCALL DELAY_NMS
    ;MOV   R0,#0xFA
    ;LCALL DELAY_NMS
    
    LCALL READ_UART  ;从UART中读取数据
    MOV   A,R0
    JZ    LOOP       ;R0为0（即失败），则重新循环
    MOV   A,R1       ;将读到的数据存入累加器
    MOV   R0,A       ;将读到的数据存入R0
    LCALL WRITE_UART ;调用UART发送函数
    LJMP  LOOP
    RET

;/*********************************************************************************************************
;* 函数名称: INT_X0
;* 函数功能: 外部中断0入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/	
INT_X0:
      RETI

;/*********************************************************************************************************
;* 函数名称: TIMER0INIT
;* 函数功能: 初始化定时器0
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
TIMER0INIT:         ;1毫秒@11.0592MHz
    ORL  AUXR,#80H  ;定时器时钟1T模式
    ANL  TMOD,#0F0H ;设置定时器模式
    ORL  TMOD,#01H  ;设置定时器模式
    MOV  TL0,#0CDH  ;设置定时初值
    MOV  TH0,#0D4H  ;设置定时初值
    CLR  TF0        ;清除TF0标志
    SETB TR0        ;定时器0开始计时
    SETB ET0        ;打开定时器0中断
    RET

;/*********************************************************************************************************
;* 函数名称: INT_T0
;* 函数功能: 定时器0中断入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/	
INT_T0:
    MOV   TL0,#0CDH
    MOV   TH0,#0D4H
    LCALL DELAY_TIME_PROC ;延时定时器中断处理
    RETI

;/*********************************************************************************************************
;* 函数名称: INT_X1
;* 函数功能: 外部中断1入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
INT_X1:
      RETI

;/*********************************************************************************************************
;* 函数名称: INT_T1
;* 函数功能: 定时器1中断入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
INT_T1:
      RETI

;/*********************************************************************************************************
;* 函数名称: UARTINIT
;* 函数功能: 初始化UART
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
UARTINIT:             ;115200bps@11.0592MHz
    LCALL INIT_QUEUE    ;初始化队列

    ORL PCON,#80H     ;使能波特率倍速位SMOD
    MOV SCON,#50H     ;8位数据,可变波特率
    ORL AUXR,#04H     ;独立波特率发生器时钟为Fosc,即1T
    MOV BRT,#0FAH     ;设定独立波特率发生器重装值
    ORL AUXR,#01H     ;串口1选择独立波特率发生器为波特率发生器
    ORL AUXR,#10H     ;启动独立波特率发生器
    SETB PS           ;提高串口优先级
    SETB ES           ;打开串口中断

    RET

;/*********************************************************************************************************
;* 函数名称: INT_S
;* 函数功能: 串行通信中断入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
INT_S:
      JNB RI,UART_RET    ;为0时直接退出
      CLR RI             ;清空RI
      MOV R0,SBUF        ;接收数据
      LCALL EN_QUEUE     ;将数据写入队列
      RETI               ;退出
UART_RET:
    RETI                 ;退出

;/*********************************************************************************************************
;* 函数名称: READ_UART
;* 函数功能: 从UART中读出数据
;* 输入参数: void
;* 输出参数: R0：1-成功，0-失败，R1：读取到的数据
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
READ_UART:
      LCALL DE_QUEUE   ;从队列中读取数据
      RET

;/*********************************************************************************************************
;* 函数名称: WRITE_UART
;* 函数功能: 向UART写入数据
;* 输入参数: void
;* 输出参数: R0：需要发送的数据
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
WRITE_UART:
      MOV SBUF,R0
WRITE_UART_LOOP:
      JNB TI,WRITE_UART_LOOP
      CLR TI
      RET

;/*********************************************************************************************************
;* 函数名称: INIT_QUEUE
;* 函数功能: 初始化队列
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 该队列由UART专用
;*********************************************************************************************************/
s_iQueue_Front DATA 31H  ;头指针，队非空时指向队头元素
s_iQueue_Rear  DATA 32H  ;尾指针，队非空时指向队尾元素的下一个位置
s_iQueue_Num   DATA 33H  ;当前容量
s_iQueue_Size  DATA 34H  ;队列大小，暂定10个
s_iQueue_Data0 DATA 35H  ;数据0
s_iQueue_Data1 DATA 36H  ;数据1
s_iQueue_Data2 DATA 37H  ;数据2
s_iQueue_Data3 DATA 38H  ;数据3
s_iQueue_Data4 DATA 39H  ;数据4
s_iQueue_Data5 DATA 3AH  ;数据5
s_iQueue_Data6 DATA 3BH  ;数据6
s_iQueue_Data7 DATA 3CH  ;数据7
s_iQueue_Data8 DATA 3DH  ;数据8
s_iQueue_Data9 DATA 3EH  ;数据9
INIT_QUEUE:
    MOV s_iQueue_Front,#00H
    MOV s_iQueue_Rear,#00H
    MOV s_iQueue_Num,#00H
    MOV s_iQueue_Size,#0AH
    MOV s_iQueue_Data0,#00H
    MOV s_iQueue_Data1,#01H 
    MOV s_iQueue_Data2,#02H
    MOV s_iQueue_Data3,#03H
    MOV s_iQueue_Data4,#04H
    MOV s_iQueue_Data5,#05H
    MOV s_iQueue_Data6,#06H
    MOV s_iQueue_Data7,#07H
    MOV s_iQueue_Data8,#08H
    MOV s_iQueue_Data9,#09H
    RET

;/*********************************************************************************************************
;* 函数名称: EN_QUEUE
;* 函数功能: 将数据存入队列
;* 输入参数: R0-需要储存的数据
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 若队列已满，则自动抛弃队首元素
;*********************************************************************************************************/
EN_QUEUE:
      ;若队列未满
      MOV  A,s_iQueue_Num
      CJNE A,#0AH,QUEUE_NOT_FILL ;若队列未满，转至QUEUE_NOT_FILL
      MOV  s_iQueue_Num,#0AH     ;若队列已满
      
      ;队首加一
      INC  s_iQueue_Front        ;抛弃队首元素
      MOV  A,s_iQueue_Front
      MOV  B,#0AH
      DIV  AB
      MOV  s_iQueue_Front,B
      LJMP QUEUE_EN_DATA
QUEUE_NOT_FILL:
      INC  s_iQueue_Num           ;当前队列容量加一
QUEUE_EN_DATA:

      ;将数据添加至队尾
      MOV  A,s_iQueue_Rear
      ADD  A,#35H
      MOV  R1,A
      MOV  A,R0
      MOV  @R1,A

      ;队尾加一
      INC s_iQueue_Rear
      MOV A,s_iQueue_Rear
      MOV B,#0AH
      DIV AB
      MOV s_iQueue_Rear,B
      RET

;/*********************************************************************************************************
;* 函数名称: DE_QUEUE
;* 函数功能: 从队列中读出数据
;* 输入参数: void
;* 输出参数: R0：1-成功，0-失败，R1：读取到的数据
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
DE_QUEUE:
      ;队列为空则直接返回
      MOV A,s_iQueue_Num
      JNZ QUEUE_DE_DATA    ;累加器非零则跳转至QUEUE_DE_DATA
      MOV R0,#00H          ;获取失败
      RET                  ;直接退出
QUEUE_DE_DATA:             ;开始读出数据
      MOV A,s_iQueue_Front ;将队首地址加载累加器中
      ADD A,#35H
      MOV R1,A
      MOV A,@R1            ;读取数据，储存至累加器中
      MOV R1,A             ;将读到的数据写入R1中，达到传出去的目的
      DEC s_iQueue_Num     ;当前队列总量减一

      ;队首往后挪
      INC s_iQueue_Front
      MOV A,s_iQueue_Front
      MOV B,#0AH
      DIV AB
      MOV s_iQueue_Front,B

      MOV R0,#01H          ;标志读取成功
      RET

;/*********************************************************************************************************
;* 函数名称: INIT_DELAY
;* 函数功能: 初始化延时
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 最多延时255ms
;*********************************************************************************************************/
s_iDelayTime DATA 30H
INIT_DELAY:
      MOV s_iDelayTime,#00H
      RET

;/*********************************************************************************************************
;* 函数名称: DELAY_NMS
;* 函数功能: 毫秒延时
;* 输入参数: R0-延时时长
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 最多延时255ms
;*********************************************************************************************************/
DELAY_NMS:
      MOV s_iDelayTime,R0
DELAY_LOOP:
      MOV A,s_iDelayTime
      JNZ DELAY_LOOP     ;非零则继续循环
      RET

;/*********************************************************************************************************
;* 函数名称: DELAY_TIME_PROC
;* 函数功能: 定时器处理延时函数
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 最多延时255ms
;*********************************************************************************************************/
DELAY_TIME_PROC:
      MOV A,s_iDelayTime  ;将s_iDelayTime加载至累加器中
      JZ  DELAY_TIME_RET  ;累加器为0则直接退出
      DEC s_iDelayTime    ;否则s_iDelayTime - 1
DELAY_TIME_RET:
      RET




END